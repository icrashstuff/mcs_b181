/* SPDX-License-Identifier: MIT
 *
 * SPDX-FileCopyrightText: Copyright (c) 2025 Ian Hangartner <icrashstuff at outlook dot com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/* WARNING: This file is automatically generated by gen_texture_ids.py, DO NOT EDIT */

#ifndef MCS_B181_CLIENT_TEXTURE_IDS_H
#define MCS_B181_CLIENT_TEXTURE_IDS_H

#include <SDL3/SDL_stdinc.h>
#include <glm/glm.hpp>

namespace mc_id
{

struct terrain_face_t
{
    glm::vec2 corners[4];
};

enum terrain_face_id_t
{

    FACE_ATLAS,
    FACE_BED_FEET_END,
    FACE_BED_FEET_SIDE,
    FACE_BED_FEET_TOP,
    FACE_BED_HEAD_END,
    FACE_BED_HEAD_SIDE,
    FACE_BED_HEAD_TOP,
    FACE_BEDROCK,
    FACE_BOOKSHELF,
    FACE_BRICK,
    FACE_CACTUS_BOTTOM,
    FACE_CACTUS_SIDE,
    FACE_CACTUS_TOP,
    FACE_CAKE_BOTTOM,
    FACE_CAKE_INNER,
    FACE_CAKE_SIDE,
    FACE_CAKE_TOP,
    FACE_CLAY,
    FACE_COAL_ORE,
    FACE_COBBLESTONE_MOSSY,
    FACE_COBBLESTONE,
    FACE_CRAFTING_TABLE_FRONT,
    FACE_CRAFTING_TABLE_SIDE,
    FACE_CRAFTING_TABLE_TOP,
    FACE_DAYLIGHT_DETECTOR_SIDE,
    FACE_DAYLIGHT_DETECTOR_TOP,
    FACE_DEADBUSH,
    FACE_DESTROY_STAGE_0,
    FACE_DESTROY_STAGE_1,
    FACE_DESTROY_STAGE_2,
    FACE_DESTROY_STAGE_3,
    FACE_DESTROY_STAGE_4,
    FACE_DESTROY_STAGE_5,
    FACE_DESTROY_STAGE_6,
    FACE_DESTROY_STAGE_7,
    FACE_DESTROY_STAGE_8,
    FACE_DESTROY_STAGE_9,
    FACE_DIAMOND_BLOCK,
    FACE_DIAMOND_ORE,
    FACE_DIRT,
    FACE_DISPENSER_FRONT_HORIZONTAL,
    FACE_DISPENSER_FRONT_VERTICAL,
    FACE_DOOR_IRON_LOWER,
    FACE_DOOR_IRON_UPPER,
    FACE_DOOR_WOOD_LOWER,
    FACE_DOOR_WOOD_UPPER,
    FACE_EMERALD_BLOCK,
    FACE_EMERALD_ORE,
    FACE_ENCHANTING_TABLE_BOTTOM,
    FACE_ENCHANTING_TABLE_SIDE,
    FACE_ENCHANTING_TABLE_TOP,
    FACE_FARMLAND_DRY,
    FACE_FARMLAND_WET,
    FACE_FERN,
    FACE_FIRE_LAYER_0,
    FACE_FIRE_LAYER_1,
    FACE_FLOWER_DANDELION,
    FACE_FLOWER_POT,
    FACE_FLOWER_ROSE,
    FACE_FURNACE_FRONT_OFF,
    FACE_FURNACE_FRONT_ON,
    FACE_FURNACE_SIDE,
    FACE_FURNACE_TOP,
    FACE_GLASS_PANE_TOP,
    FACE_GLASS,
    FACE_GLOWSTONE,
    FACE_GOLD_BLOCK,
    FACE_GOLD_ORE,
    FACE_GRASS_SIDE_OVERLAY,
    FACE_GRASS_SIDE_SNOWED,
    FACE_GRASS_SIDE,
    FACE_GRASS_TOP,
    FACE_GRAVEL,
    FACE_ICE,
    FACE_IRON_BARS,
    FACE_IRON_BLOCK,
    FACE_IRON_ORE,
    FACE_JUKEBOX_SIDE,
    FACE_JUKEBOX_TOP,
    FACE_LADDER,
    FACE_LAPIS_BLOCK,
    FACE_LAPIS_ORE,
    FACE_LAVA_FLOW_STRAIGHT,
    FACE_LAVA_FLOW_DIAGONAL,
    FACE_LAVA_STILL,
    FACE_LEAVES_BIRCH_OPAQUE,
    FACE_LEAVES_BIRCH,
    FACE_LEAVES_JUNGLE_OPAQUE,
    FACE_LEAVES_JUNGLE,
    FACE_LEAVES_OAK_OPAQUE,
    FACE_LEAVES_OAK,
    FACE_LEAVES_SPRUCE_OPAQUE,
    FACE_LEAVES_SPRUCE,
    FACE_LEVER,
    FACE_LOG_BIRCH_TOP,
    FACE_LOG_BIRCH,
    FACE_LOG_JUNGLE_TOP,
    FACE_LOG_JUNGLE,
    FACE_LOG_OAK_TOP,
    FACE_LOG_OAK,
    FACE_LOG_SPRUCE_TOP,
    FACE_LOG_SPRUCE,
    FACE_MELON_SIDE,
    FACE_MELON_STEM_CONNECTED,
    FACE_MELON_STEM_DISCONNECTED,
    FACE_MELON_TOP,
    FACE_MOB_SPAWNER,
    FACE_MUSHROOM_BLOCK_INSIDE,
    FACE_MUSHROOM_BLOCK_SKIN_BROWN,
    FACE_MUSHROOM_BLOCK_SKIN_RED,
    FACE_MUSHROOM_BLOCK_SKIN_STEM,
    FACE_MUSHROOM_BROWN,
    FACE_MUSHROOM_RED,
    FACE_MYCELIUM_SIDE,
    FACE_MYCELIUM_TOP,
    FACE_NETHER_BRICK,
    FACE_NETHERRACK,
    FACE_NOTEBLOCK,
    FACE_OBSIDIAN,
    FACE_PISTON_BOTTOM,
    FACE_PISTON_INNER,
    FACE_PISTON_SIDE,
    FACE_PISTON_TOP_NORMAL,
    FACE_PISTON_TOP_STICKY,
    FACE_PLANKS_BIRCH,
    FACE_PLANKS_JUNGLE,
    FACE_PLANKS_OAK,
    FACE_PLANKS_SPRUCE,
    FACE_PORTAL,
    FACE_PUMPKIN_FACE_OFF,
    FACE_PUMPKIN_FACE_ON,
    FACE_PUMPKIN_SIDE,
    FACE_PUMPKIN_STEM_CONNECTED,
    FACE_PUMPKIN_STEM_DISCONNECTED,
    FACE_PUMPKIN_TOP,
    FACE_RAIL_ACTIVATOR_POWERED,
    FACE_RAIL_ACTIVATOR,
    FACE_RAIL_DETECTOR_POWERED,
    FACE_RAIL_DETECTOR,
    FACE_RAIL_GOLDEN_POWERED,
    FACE_RAIL_GOLDEN,
    FACE_RAIL_NORMAL_TURNED,
    FACE_RAIL_NORMAL,
    FACE_REDSTONE_BLOCK,
    FACE_REDSTONE_DUST_CROSS_OVERLAY,
    FACE_REDSTONE_DUST_CROSS,
    FACE_REDSTONE_DUST_LINE_OVERLAY,
    FACE_REDSTONE_DUST_LINE,
    FACE_REDSTONE_LAMP_OFF,
    FACE_REDSTONE_LAMP_ON,
    FACE_REDSTONE_ORE,
    FACE_REDSTONE_TORCH_OFF,
    FACE_REDSTONE_TORCH_ON,
    FACE_REEDS,
    FACE_REPEATER_OFF,
    FACE_REPEATER_ON,
    FACE_SAND,
    FACE_SANDSTONE_BOTTOM,
    FACE_SANDSTONE_CARVED,
    FACE_SANDSTONE_NORMAL,
    FACE_SANDSTONE_SMOOTH,
    FACE_SANDSTONE_TOP,
    FACE_SAPLING_BIRCH,
    FACE_SAPLING_JUNGLE,
    FACE_SAPLING_OAK,
    FACE_SAPLING_SPRUCE,
    FACE_SNOW,
    FACE_SOUL_SAND,
    FACE_SPONGE,
    FACE_STONE_SLAB_SIDE,
    FACE_STONE_SLAB_TOP,
    FACE_STONE,
    FACE_STONEBRICK_CARVED,
    FACE_STONEBRICK_CRACKED,
    FACE_STONEBRICK_MOSSY,
    FACE_STONEBRICK,
    FACE_TALLGRASS,
    FACE_TNT_BOTTOM,
    FACE_TNT_SIDE,
    FACE_TNT_TOP,
    FACE_TORCH_ON,
    FACE_TRAPDOOR,
    FACE_VINE,
    FACE_WATER_FLOW_STRAIGHT,
    FACE_WATER_FLOW_DIAGONAL,
    FACE_WATER_STILL,
    FACE_WEB,
    FACE_WHEAT_STAGE_0,
    FACE_WHEAT_STAGE_1,
    FACE_WHEAT_STAGE_2,
    FACE_WHEAT_STAGE_3,
    FACE_WHEAT_STAGE_4,
    FACE_WHEAT_STAGE_5,
    FACE_WHEAT_STAGE_6,
    FACE_WHEAT_STAGE_7,
    FACE_WOOL_COLORED_BLACK,
    FACE_WOOL_COLORED_BLUE,
    FACE_WOOL_COLORED_BROWN,
    FACE_WOOL_COLORED_CYAN,
    FACE_WOOL_COLORED_GRAY,
    FACE_WOOL_COLORED_GREEN,
    FACE_WOOL_COLORED_LIGHT_BLUE,
    FACE_WOOL_COLORED_LIME,
    FACE_WOOL_COLORED_MAGENTA,
    FACE_WOOL_COLORED_ORANGE,
    FACE_WOOL_COLORED_PINK,
    FACE_WOOL_COLORED_PURPLE,
    FACE_WOOL_COLORED_RED,
    FACE_WOOL_COLORED_SILVER,
    FACE_WOOL_COLORED_WHITE,
    FACE_WOOL_COLORED_YELLOW,

    FACE_DEBUG,

    FACE_COUNT
};

static const char* get_face_id_name(const terrain_face_id_t id)
{
    switch (id)
    {
    case FACE_ATLAS:
        return "FACE_ATLAS";
    case FACE_BED_FEET_END:
        return "FACE_BED_FEET_END";
    case FACE_BED_FEET_SIDE:
        return "FACE_BED_FEET_SIDE";
    case FACE_BED_FEET_TOP:
        return "FACE_BED_FEET_TOP";
    case FACE_BED_HEAD_END:
        return "FACE_BED_HEAD_END";
    case FACE_BED_HEAD_SIDE:
        return "FACE_BED_HEAD_SIDE";
    case FACE_BED_HEAD_TOP:
        return "FACE_BED_HEAD_TOP";
    case FACE_BEDROCK:
        return "FACE_BEDROCK";
    case FACE_BOOKSHELF:
        return "FACE_BOOKSHELF";
    case FACE_BRICK:
        return "FACE_BRICK";
    case FACE_CACTUS_BOTTOM:
        return "FACE_CACTUS_BOTTOM";
    case FACE_CACTUS_SIDE:
        return "FACE_CACTUS_SIDE";
    case FACE_CACTUS_TOP:
        return "FACE_CACTUS_TOP";
    case FACE_CAKE_BOTTOM:
        return "FACE_CAKE_BOTTOM";
    case FACE_CAKE_INNER:
        return "FACE_CAKE_INNER";
    case FACE_CAKE_SIDE:
        return "FACE_CAKE_SIDE";
    case FACE_CAKE_TOP:
        return "FACE_CAKE_TOP";
    case FACE_CLAY:
        return "FACE_CLAY";
    case FACE_COAL_ORE:
        return "FACE_COAL_ORE";
    case FACE_COBBLESTONE_MOSSY:
        return "FACE_COBBLESTONE_MOSSY";
    case FACE_COBBLESTONE:
        return "FACE_COBBLESTONE";
    case FACE_CRAFTING_TABLE_FRONT:
        return "FACE_CRAFTING_TABLE_FRONT";
    case FACE_CRAFTING_TABLE_SIDE:
        return "FACE_CRAFTING_TABLE_SIDE";
    case FACE_CRAFTING_TABLE_TOP:
        return "FACE_CRAFTING_TABLE_TOP";
    case FACE_DAYLIGHT_DETECTOR_SIDE:
        return "FACE_DAYLIGHT_DETECTOR_SIDE";
    case FACE_DAYLIGHT_DETECTOR_TOP:
        return "FACE_DAYLIGHT_DETECTOR_TOP";
    case FACE_DEADBUSH:
        return "FACE_DEADBUSH";
    case FACE_DESTROY_STAGE_0:
        return "FACE_DESTROY_STAGE_0";
    case FACE_DESTROY_STAGE_1:
        return "FACE_DESTROY_STAGE_1";
    case FACE_DESTROY_STAGE_2:
        return "FACE_DESTROY_STAGE_2";
    case FACE_DESTROY_STAGE_3:
        return "FACE_DESTROY_STAGE_3";
    case FACE_DESTROY_STAGE_4:
        return "FACE_DESTROY_STAGE_4";
    case FACE_DESTROY_STAGE_5:
        return "FACE_DESTROY_STAGE_5";
    case FACE_DESTROY_STAGE_6:
        return "FACE_DESTROY_STAGE_6";
    case FACE_DESTROY_STAGE_7:
        return "FACE_DESTROY_STAGE_7";
    case FACE_DESTROY_STAGE_8:
        return "FACE_DESTROY_STAGE_8";
    case FACE_DESTROY_STAGE_9:
        return "FACE_DESTROY_STAGE_9";
    case FACE_DIAMOND_BLOCK:
        return "FACE_DIAMOND_BLOCK";
    case FACE_DIAMOND_ORE:
        return "FACE_DIAMOND_ORE";
    case FACE_DIRT:
        return "FACE_DIRT";
    case FACE_DISPENSER_FRONT_HORIZONTAL:
        return "FACE_DISPENSER_FRONT_HORIZONTAL";
    case FACE_DISPENSER_FRONT_VERTICAL:
        return "FACE_DISPENSER_FRONT_VERTICAL";
    case FACE_DOOR_IRON_LOWER:
        return "FACE_DOOR_IRON_LOWER";
    case FACE_DOOR_IRON_UPPER:
        return "FACE_DOOR_IRON_UPPER";
    case FACE_DOOR_WOOD_LOWER:
        return "FACE_DOOR_WOOD_LOWER";
    case FACE_DOOR_WOOD_UPPER:
        return "FACE_DOOR_WOOD_UPPER";
    case FACE_EMERALD_BLOCK:
        return "FACE_EMERALD_BLOCK";
    case FACE_EMERALD_ORE:
        return "FACE_EMERALD_ORE";
    case FACE_ENCHANTING_TABLE_BOTTOM:
        return "FACE_ENCHANTING_TABLE_BOTTOM";
    case FACE_ENCHANTING_TABLE_SIDE:
        return "FACE_ENCHANTING_TABLE_SIDE";
    case FACE_ENCHANTING_TABLE_TOP:
        return "FACE_ENCHANTING_TABLE_TOP";
    case FACE_FARMLAND_DRY:
        return "FACE_FARMLAND_DRY";
    case FACE_FARMLAND_WET:
        return "FACE_FARMLAND_WET";
    case FACE_FERN:
        return "FACE_FERN";
    case FACE_FIRE_LAYER_0:
        return "FACE_FIRE_LAYER_0";
    case FACE_FIRE_LAYER_1:
        return "FACE_FIRE_LAYER_1";
    case FACE_FLOWER_DANDELION:
        return "FACE_FLOWER_DANDELION";
    case FACE_FLOWER_POT:
        return "FACE_FLOWER_POT";
    case FACE_FLOWER_ROSE:
        return "FACE_FLOWER_ROSE";
    case FACE_FURNACE_FRONT_OFF:
        return "FACE_FURNACE_FRONT_OFF";
    case FACE_FURNACE_FRONT_ON:
        return "FACE_FURNACE_FRONT_ON";
    case FACE_FURNACE_SIDE:
        return "FACE_FURNACE_SIDE";
    case FACE_FURNACE_TOP:
        return "FACE_FURNACE_TOP";
    case FACE_GLASS_PANE_TOP:
        return "FACE_GLASS_PANE_TOP";
    case FACE_GLASS:
        return "FACE_GLASS";
    case FACE_GLOWSTONE:
        return "FACE_GLOWSTONE";
    case FACE_GOLD_BLOCK:
        return "FACE_GOLD_BLOCK";
    case FACE_GOLD_ORE:
        return "FACE_GOLD_ORE";
    case FACE_GRASS_SIDE_OVERLAY:
        return "FACE_GRASS_SIDE_OVERLAY";
    case FACE_GRASS_SIDE_SNOWED:
        return "FACE_GRASS_SIDE_SNOWED";
    case FACE_GRASS_SIDE:
        return "FACE_GRASS_SIDE";
    case FACE_GRASS_TOP:
        return "FACE_GRASS_TOP";
    case FACE_GRAVEL:
        return "FACE_GRAVEL";
    case FACE_ICE:
        return "FACE_ICE";
    case FACE_IRON_BARS:
        return "FACE_IRON_BARS";
    case FACE_IRON_BLOCK:
        return "FACE_IRON_BLOCK";
    case FACE_IRON_ORE:
        return "FACE_IRON_ORE";
    case FACE_JUKEBOX_SIDE:
        return "FACE_JUKEBOX_SIDE";
    case FACE_JUKEBOX_TOP:
        return "FACE_JUKEBOX_TOP";
    case FACE_LADDER:
        return "FACE_LADDER";
    case FACE_LAPIS_BLOCK:
        return "FACE_LAPIS_BLOCK";
    case FACE_LAPIS_ORE:
        return "FACE_LAPIS_ORE";
    case FACE_LAVA_FLOW_STRAIGHT:
        return "FACE_LAVA_FLOW_STRAIGHT";
    case FACE_LAVA_FLOW_DIAGONAL:
        return "FACE_LAVA_FLOW_DIAGONAL";
    case FACE_LAVA_STILL:
        return "FACE_LAVA_STILL";
    case FACE_LEAVES_BIRCH_OPAQUE:
        return "FACE_LEAVES_BIRCH_OPAQUE";
    case FACE_LEAVES_BIRCH:
        return "FACE_LEAVES_BIRCH";
    case FACE_LEAVES_JUNGLE_OPAQUE:
        return "FACE_LEAVES_JUNGLE_OPAQUE";
    case FACE_LEAVES_JUNGLE:
        return "FACE_LEAVES_JUNGLE";
    case FACE_LEAVES_OAK_OPAQUE:
        return "FACE_LEAVES_OAK_OPAQUE";
    case FACE_LEAVES_OAK:
        return "FACE_LEAVES_OAK";
    case FACE_LEAVES_SPRUCE_OPAQUE:
        return "FACE_LEAVES_SPRUCE_OPAQUE";
    case FACE_LEAVES_SPRUCE:
        return "FACE_LEAVES_SPRUCE";
    case FACE_LEVER:
        return "FACE_LEVER";
    case FACE_LOG_BIRCH_TOP:
        return "FACE_LOG_BIRCH_TOP";
    case FACE_LOG_BIRCH:
        return "FACE_LOG_BIRCH";
    case FACE_LOG_JUNGLE_TOP:
        return "FACE_LOG_JUNGLE_TOP";
    case FACE_LOG_JUNGLE:
        return "FACE_LOG_JUNGLE";
    case FACE_LOG_OAK_TOP:
        return "FACE_LOG_OAK_TOP";
    case FACE_LOG_OAK:
        return "FACE_LOG_OAK";
    case FACE_LOG_SPRUCE_TOP:
        return "FACE_LOG_SPRUCE_TOP";
    case FACE_LOG_SPRUCE:
        return "FACE_LOG_SPRUCE";
    case FACE_MELON_SIDE:
        return "FACE_MELON_SIDE";
    case FACE_MELON_STEM_CONNECTED:
        return "FACE_MELON_STEM_CONNECTED";
    case FACE_MELON_STEM_DISCONNECTED:
        return "FACE_MELON_STEM_DISCONNECTED";
    case FACE_MELON_TOP:
        return "FACE_MELON_TOP";
    case FACE_MOB_SPAWNER:
        return "FACE_MOB_SPAWNER";
    case FACE_MUSHROOM_BLOCK_INSIDE:
        return "FACE_MUSHROOM_BLOCK_INSIDE";
    case FACE_MUSHROOM_BLOCK_SKIN_BROWN:
        return "FACE_MUSHROOM_BLOCK_SKIN_BROWN";
    case FACE_MUSHROOM_BLOCK_SKIN_RED:
        return "FACE_MUSHROOM_BLOCK_SKIN_RED";
    case FACE_MUSHROOM_BLOCK_SKIN_STEM:
        return "FACE_MUSHROOM_BLOCK_SKIN_STEM";
    case FACE_MUSHROOM_BROWN:
        return "FACE_MUSHROOM_BROWN";
    case FACE_MUSHROOM_RED:
        return "FACE_MUSHROOM_RED";
    case FACE_MYCELIUM_SIDE:
        return "FACE_MYCELIUM_SIDE";
    case FACE_MYCELIUM_TOP:
        return "FACE_MYCELIUM_TOP";
    case FACE_NETHER_BRICK:
        return "FACE_NETHER_BRICK";
    case FACE_NETHERRACK:
        return "FACE_NETHERRACK";
    case FACE_NOTEBLOCK:
        return "FACE_NOTEBLOCK";
    case FACE_OBSIDIAN:
        return "FACE_OBSIDIAN";
    case FACE_PISTON_BOTTOM:
        return "FACE_PISTON_BOTTOM";
    case FACE_PISTON_INNER:
        return "FACE_PISTON_INNER";
    case FACE_PISTON_SIDE:
        return "FACE_PISTON_SIDE";
    case FACE_PISTON_TOP_NORMAL:
        return "FACE_PISTON_TOP_NORMAL";
    case FACE_PISTON_TOP_STICKY:
        return "FACE_PISTON_TOP_STICKY";
    case FACE_PLANKS_BIRCH:
        return "FACE_PLANKS_BIRCH";
    case FACE_PLANKS_JUNGLE:
        return "FACE_PLANKS_JUNGLE";
    case FACE_PLANKS_OAK:
        return "FACE_PLANKS_OAK";
    case FACE_PLANKS_SPRUCE:
        return "FACE_PLANKS_SPRUCE";
    case FACE_PORTAL:
        return "FACE_PORTAL";
    case FACE_PUMPKIN_FACE_OFF:
        return "FACE_PUMPKIN_FACE_OFF";
    case FACE_PUMPKIN_FACE_ON:
        return "FACE_PUMPKIN_FACE_ON";
    case FACE_PUMPKIN_SIDE:
        return "FACE_PUMPKIN_SIDE";
    case FACE_PUMPKIN_STEM_CONNECTED:
        return "FACE_PUMPKIN_STEM_CONNECTED";
    case FACE_PUMPKIN_STEM_DISCONNECTED:
        return "FACE_PUMPKIN_STEM_DISCONNECTED";
    case FACE_PUMPKIN_TOP:
        return "FACE_PUMPKIN_TOP";
    case FACE_RAIL_ACTIVATOR_POWERED:
        return "FACE_RAIL_ACTIVATOR_POWERED";
    case FACE_RAIL_ACTIVATOR:
        return "FACE_RAIL_ACTIVATOR";
    case FACE_RAIL_DETECTOR_POWERED:
        return "FACE_RAIL_DETECTOR_POWERED";
    case FACE_RAIL_DETECTOR:
        return "FACE_RAIL_DETECTOR";
    case FACE_RAIL_GOLDEN_POWERED:
        return "FACE_RAIL_GOLDEN_POWERED";
    case FACE_RAIL_GOLDEN:
        return "FACE_RAIL_GOLDEN";
    case FACE_RAIL_NORMAL_TURNED:
        return "FACE_RAIL_NORMAL_TURNED";
    case FACE_RAIL_NORMAL:
        return "FACE_RAIL_NORMAL";
    case FACE_REDSTONE_BLOCK:
        return "FACE_REDSTONE_BLOCK";
    case FACE_REDSTONE_DUST_CROSS_OVERLAY:
        return "FACE_REDSTONE_DUST_CROSS_OVERLAY";
    case FACE_REDSTONE_DUST_CROSS:
        return "FACE_REDSTONE_DUST_CROSS";
    case FACE_REDSTONE_DUST_LINE_OVERLAY:
        return "FACE_REDSTONE_DUST_LINE_OVERLAY";
    case FACE_REDSTONE_DUST_LINE:
        return "FACE_REDSTONE_DUST_LINE";
    case FACE_REDSTONE_LAMP_OFF:
        return "FACE_REDSTONE_LAMP_OFF";
    case FACE_REDSTONE_LAMP_ON:
        return "FACE_REDSTONE_LAMP_ON";
    case FACE_REDSTONE_ORE:
        return "FACE_REDSTONE_ORE";
    case FACE_REDSTONE_TORCH_OFF:
        return "FACE_REDSTONE_TORCH_OFF";
    case FACE_REDSTONE_TORCH_ON:
        return "FACE_REDSTONE_TORCH_ON";
    case FACE_REEDS:
        return "FACE_REEDS";
    case FACE_REPEATER_OFF:
        return "FACE_REPEATER_OFF";
    case FACE_REPEATER_ON:
        return "FACE_REPEATER_ON";
    case FACE_SAND:
        return "FACE_SAND";
    case FACE_SANDSTONE_BOTTOM:
        return "FACE_SANDSTONE_BOTTOM";
    case FACE_SANDSTONE_CARVED:
        return "FACE_SANDSTONE_CARVED";
    case FACE_SANDSTONE_NORMAL:
        return "FACE_SANDSTONE_NORMAL";
    case FACE_SANDSTONE_SMOOTH:
        return "FACE_SANDSTONE_SMOOTH";
    case FACE_SANDSTONE_TOP:
        return "FACE_SANDSTONE_TOP";
    case FACE_SAPLING_BIRCH:
        return "FACE_SAPLING_BIRCH";
    case FACE_SAPLING_JUNGLE:
        return "FACE_SAPLING_JUNGLE";
    case FACE_SAPLING_OAK:
        return "FACE_SAPLING_OAK";
    case FACE_SAPLING_SPRUCE:
        return "FACE_SAPLING_SPRUCE";
    case FACE_SNOW:
        return "FACE_SNOW";
    case FACE_SOUL_SAND:
        return "FACE_SOUL_SAND";
    case FACE_SPONGE:
        return "FACE_SPONGE";
    case FACE_STONE_SLAB_SIDE:
        return "FACE_STONE_SLAB_SIDE";
    case FACE_STONE_SLAB_TOP:
        return "FACE_STONE_SLAB_TOP";
    case FACE_STONE:
        return "FACE_STONE";
    case FACE_STONEBRICK_CARVED:
        return "FACE_STONEBRICK_CARVED";
    case FACE_STONEBRICK_CRACKED:
        return "FACE_STONEBRICK_CRACKED";
    case FACE_STONEBRICK_MOSSY:
        return "FACE_STONEBRICK_MOSSY";
    case FACE_STONEBRICK:
        return "FACE_STONEBRICK";
    case FACE_TALLGRASS:
        return "FACE_TALLGRASS";
    case FACE_TNT_BOTTOM:
        return "FACE_TNT_BOTTOM";
    case FACE_TNT_SIDE:
        return "FACE_TNT_SIDE";
    case FACE_TNT_TOP:
        return "FACE_TNT_TOP";
    case FACE_TORCH_ON:
        return "FACE_TORCH_ON";
    case FACE_TRAPDOOR:
        return "FACE_TRAPDOOR";
    case FACE_VINE:
        return "FACE_VINE";
    case FACE_WATER_FLOW_STRAIGHT:
        return "FACE_WATER_FLOW_STRAIGHT";
    case FACE_WATER_FLOW_DIAGONAL:
        return "FACE_WATER_FLOW_DIAGONAL";
    case FACE_WATER_STILL:
        return "FACE_WATER_STILL";
    case FACE_WEB:
        return "FACE_WEB";
    case FACE_WHEAT_STAGE_0:
        return "FACE_WHEAT_STAGE_0";
    case FACE_WHEAT_STAGE_1:
        return "FACE_WHEAT_STAGE_1";
    case FACE_WHEAT_STAGE_2:
        return "FACE_WHEAT_STAGE_2";
    case FACE_WHEAT_STAGE_3:
        return "FACE_WHEAT_STAGE_3";
    case FACE_WHEAT_STAGE_4:
        return "FACE_WHEAT_STAGE_4";
    case FACE_WHEAT_STAGE_5:
        return "FACE_WHEAT_STAGE_5";
    case FACE_WHEAT_STAGE_6:
        return "FACE_WHEAT_STAGE_6";
    case FACE_WHEAT_STAGE_7:
        return "FACE_WHEAT_STAGE_7";
    case FACE_WOOL_COLORED_BLACK:
        return "FACE_WOOL_COLORED_BLACK";
    case FACE_WOOL_COLORED_BLUE:
        return "FACE_WOOL_COLORED_BLUE";
    case FACE_WOOL_COLORED_BROWN:
        return "FACE_WOOL_COLORED_BROWN";
    case FACE_WOOL_COLORED_CYAN:
        return "FACE_WOOL_COLORED_CYAN";
    case FACE_WOOL_COLORED_GRAY:
        return "FACE_WOOL_COLORED_GRAY";
    case FACE_WOOL_COLORED_GREEN:
        return "FACE_WOOL_COLORED_GREEN";
    case FACE_WOOL_COLORED_LIGHT_BLUE:
        return "FACE_WOOL_COLORED_LIGHT_BLUE";
    case FACE_WOOL_COLORED_LIME:
        return "FACE_WOOL_COLORED_LIME";
    case FACE_WOOL_COLORED_MAGENTA:
        return "FACE_WOOL_COLORED_MAGENTA";
    case FACE_WOOL_COLORED_ORANGE:
        return "FACE_WOOL_COLORED_ORANGE";
    case FACE_WOOL_COLORED_PINK:
        return "FACE_WOOL_COLORED_PINK";
    case FACE_WOOL_COLORED_PURPLE:
        return "FACE_WOOL_COLORED_PURPLE";
    case FACE_WOOL_COLORED_RED:
        return "FACE_WOOL_COLORED_RED";
    case FACE_WOOL_COLORED_SILVER:
        return "FACE_WOOL_COLORED_SILVER";
    case FACE_WOOL_COLORED_WHITE:
        return "FACE_WOOL_COLORED_WHITE";
    case FACE_WOOL_COLORED_YELLOW:
        return "FACE_WOOL_COLORED_YELLOW";
    case FACE_DEBUG:
        return "FACE_DEBUG";
    case FACE_COUNT:
        return "FACE_COUNT";
    }
    return NULL;
}

static const char* get_face_fname(const terrain_face_id_t id)
{
    switch (id)
    {
    case FACE_BED_FEET_END:
        return "bed_feet_end.png";
    case FACE_BED_FEET_SIDE:
        return "bed_feet_side.png";
    case FACE_BED_FEET_TOP:
        return "bed_feet_top.png";
    case FACE_BED_HEAD_END:
        return "bed_head_end.png";
    case FACE_BED_HEAD_SIDE:
        return "bed_head_side.png";
    case FACE_BED_HEAD_TOP:
        return "bed_head_top.png";
    case FACE_BEDROCK:
        return "bedrock.png";
    case FACE_BOOKSHELF:
        return "bookshelf.png";
    case FACE_BRICK:
        return "brick.png";
    case FACE_CACTUS_BOTTOM:
        return "cactus_bottom.png";
    case FACE_CACTUS_SIDE:
        return "cactus_side.png";
    case FACE_CACTUS_TOP:
        return "cactus_top.png";
    case FACE_CAKE_BOTTOM:
        return "cake_bottom.png";
    case FACE_CAKE_INNER:
        return "cake_inner.png";
    case FACE_CAKE_SIDE:
        return "cake_side.png";
    case FACE_CAKE_TOP:
        return "cake_top.png";
    case FACE_CLAY:
        return "clay.png";
    case FACE_COAL_ORE:
        return "coal_ore.png";
    case FACE_COBBLESTONE_MOSSY:
        return "cobblestone_mossy.png";
    case FACE_COBBLESTONE:
        return "cobblestone.png";
    case FACE_CRAFTING_TABLE_FRONT:
        return "crafting_table_front.png";
    case FACE_CRAFTING_TABLE_SIDE:
        return "crafting_table_side.png";
    case FACE_CRAFTING_TABLE_TOP:
        return "crafting_table_top.png";
    case FACE_DAYLIGHT_DETECTOR_SIDE:
        return "daylight_detector_side.png";
    case FACE_DAYLIGHT_DETECTOR_TOP:
        return "daylight_detector_top.png";
    case FACE_DEADBUSH:
        return "deadbush.png";
    case FACE_DESTROY_STAGE_0:
        return "destroy_stage_0.png";
    case FACE_DESTROY_STAGE_1:
        return "destroy_stage_1.png";
    case FACE_DESTROY_STAGE_2:
        return "destroy_stage_2.png";
    case FACE_DESTROY_STAGE_3:
        return "destroy_stage_3.png";
    case FACE_DESTROY_STAGE_4:
        return "destroy_stage_4.png";
    case FACE_DESTROY_STAGE_5:
        return "destroy_stage_5.png";
    case FACE_DESTROY_STAGE_6:
        return "destroy_stage_6.png";
    case FACE_DESTROY_STAGE_7:
        return "destroy_stage_7.png";
    case FACE_DESTROY_STAGE_8:
        return "destroy_stage_8.png";
    case FACE_DESTROY_STAGE_9:
        return "destroy_stage_9.png";
    case FACE_DIAMOND_BLOCK:
        return "diamond_block.png";
    case FACE_DIAMOND_ORE:
        return "diamond_ore.png";
    case FACE_DIRT:
        return "dirt.png";
    case FACE_DISPENSER_FRONT_HORIZONTAL:
        return "dispenser_front_horizontal.png";
    case FACE_DISPENSER_FRONT_VERTICAL:
        return "dispenser_front_vertical.png";
    case FACE_DOOR_IRON_LOWER:
        return "door_iron_lower.png";
    case FACE_DOOR_IRON_UPPER:
        return "door_iron_upper.png";
    case FACE_DOOR_WOOD_LOWER:
        return "door_wood_lower.png";
    case FACE_DOOR_WOOD_UPPER:
        return "door_wood_upper.png";
    case FACE_EMERALD_BLOCK:
        return "emerald_block.png";
    case FACE_EMERALD_ORE:
        return "emerald_ore.png";
    case FACE_ENCHANTING_TABLE_BOTTOM:
        return "enchanting_table_bottom.png";
    case FACE_ENCHANTING_TABLE_SIDE:
        return "enchanting_table_side.png";
    case FACE_ENCHANTING_TABLE_TOP:
        return "enchanting_table_top.png";
    case FACE_FARMLAND_DRY:
        return "farmland_dry.png";
    case FACE_FARMLAND_WET:
        return "farmland_wet.png";
    case FACE_FERN:
        return "fern.png";
    case FACE_FIRE_LAYER_0:
        return "fire_layer_0.png";
    case FACE_FIRE_LAYER_1:
        return "fire_layer_1.png";
    case FACE_FLOWER_DANDELION:
        return "flower_dandelion.png";
    case FACE_FLOWER_POT:
        return "flower_pot.png";
    case FACE_FLOWER_ROSE:
        return "flower_rose.png";
    case FACE_FURNACE_FRONT_OFF:
        return "furnace_front_off.png";
    case FACE_FURNACE_FRONT_ON:
        return "furnace_front_on.png";
    case FACE_FURNACE_SIDE:
        return "furnace_side.png";
    case FACE_FURNACE_TOP:
        return "furnace_top.png";
    case FACE_GLASS_PANE_TOP:
        return "glass_pane_top.png";
    case FACE_GLASS:
        return "glass.png";
    case FACE_GLOWSTONE:
        return "glowstone.png";
    case FACE_GOLD_BLOCK:
        return "gold_block.png";
    case FACE_GOLD_ORE:
        return "gold_ore.png";
    case FACE_GRASS_SIDE_OVERLAY:
        return "grass_side_overlay.png";
    case FACE_GRASS_SIDE_SNOWED:
        return "grass_side_snowed.png";
    case FACE_GRASS_SIDE:
        return "grass_side.png";
    case FACE_GRASS_TOP:
        return "grass_top.png";
    case FACE_GRAVEL:
        return "gravel.png";
    case FACE_ICE:
        return "ice.png";
    case FACE_IRON_BARS:
        return "iron_bars.png";
    case FACE_IRON_BLOCK:
        return "iron_block.png";
    case FACE_IRON_ORE:
        return "iron_ore.png";
    case FACE_JUKEBOX_SIDE:
        return "jukebox_side.png";
    case FACE_JUKEBOX_TOP:
        return "jukebox_top.png";
    case FACE_LADDER:
        return "ladder.png";
    case FACE_LAPIS_BLOCK:
        return "lapis_block.png";
    case FACE_LAPIS_ORE:
        return "lapis_ore.png";
    case FACE_LAVA_FLOW_STRAIGHT:
        return "lava_flow.png";
    case FACE_LAVA_FLOW_DIAGONAL:
        return "lava_flow.png";
    case FACE_LAVA_STILL:
        return "lava_still.png";
    case FACE_LEAVES_BIRCH_OPAQUE:
        return "leaves_birch_opaque.png";
    case FACE_LEAVES_BIRCH:
        return "leaves_birch.png";
    case FACE_LEAVES_JUNGLE_OPAQUE:
        return "leaves_jungle_opaque.png";
    case FACE_LEAVES_JUNGLE:
        return "leaves_jungle.png";
    case FACE_LEAVES_OAK_OPAQUE:
        return "leaves_oak_opaque.png";
    case FACE_LEAVES_OAK:
        return "leaves_oak.png";
    case FACE_LEAVES_SPRUCE_OPAQUE:
        return "leaves_spruce_opaque.png";
    case FACE_LEAVES_SPRUCE:
        return "leaves_spruce.png";
    case FACE_LEVER:
        return "lever.png";
    case FACE_LOG_BIRCH_TOP:
        return "log_birch_top.png";
    case FACE_LOG_BIRCH:
        return "log_birch.png";
    case FACE_LOG_JUNGLE_TOP:
        return "log_jungle_top.png";
    case FACE_LOG_JUNGLE:
        return "log_jungle.png";
    case FACE_LOG_OAK_TOP:
        return "log_oak_top.png";
    case FACE_LOG_OAK:
        return "log_oak.png";
    case FACE_LOG_SPRUCE_TOP:
        return "log_spruce_top.png";
    case FACE_LOG_SPRUCE:
        return "log_spruce.png";
    case FACE_MELON_SIDE:
        return "melon_side.png";
    case FACE_MELON_STEM_CONNECTED:
        return "melon_stem_connected.png";
    case FACE_MELON_STEM_DISCONNECTED:
        return "melon_stem_disconnected.png";
    case FACE_MELON_TOP:
        return "melon_top.png";
    case FACE_MOB_SPAWNER:
        return "mob_spawner.png";
    case FACE_MUSHROOM_BLOCK_INSIDE:
        return "mushroom_block_inside.png";
    case FACE_MUSHROOM_BLOCK_SKIN_BROWN:
        return "mushroom_block_skin_brown.png";
    case FACE_MUSHROOM_BLOCK_SKIN_RED:
        return "mushroom_block_skin_red.png";
    case FACE_MUSHROOM_BLOCK_SKIN_STEM:
        return "mushroom_block_skin_stem.png";
    case FACE_MUSHROOM_BROWN:
        return "mushroom_brown.png";
    case FACE_MUSHROOM_RED:
        return "mushroom_red.png";
    case FACE_MYCELIUM_SIDE:
        return "mycelium_side.png";
    case FACE_MYCELIUM_TOP:
        return "mycelium_top.png";
    case FACE_NETHER_BRICK:
        return "nether_brick.png";
    case FACE_NETHERRACK:
        return "netherrack.png";
    case FACE_NOTEBLOCK:
        return "noteblock.png";
    case FACE_OBSIDIAN:
        return "obsidian.png";
    case FACE_PISTON_BOTTOM:
        return "piston_bottom.png";
    case FACE_PISTON_INNER:
        return "piston_inner.png";
    case FACE_PISTON_SIDE:
        return "piston_side.png";
    case FACE_PISTON_TOP_NORMAL:
        return "piston_top_normal.png";
    case FACE_PISTON_TOP_STICKY:
        return "piston_top_sticky.png";
    case FACE_PLANKS_BIRCH:
        return "planks_birch.png";
    case FACE_PLANKS_JUNGLE:
        return "planks_jungle.png";
    case FACE_PLANKS_OAK:
        return "planks_oak.png";
    case FACE_PLANKS_SPRUCE:
        return "planks_spruce.png";
    case FACE_PORTAL:
        return "portal.png";
    case FACE_PUMPKIN_FACE_OFF:
        return "pumpkin_face_off.png";
    case FACE_PUMPKIN_FACE_ON:
        return "pumpkin_face_on.png";
    case FACE_PUMPKIN_SIDE:
        return "pumpkin_side.png";
    case FACE_PUMPKIN_STEM_CONNECTED:
        return "pumpkin_stem_connected.png";
    case FACE_PUMPKIN_STEM_DISCONNECTED:
        return "pumpkin_stem_disconnected.png";
    case FACE_PUMPKIN_TOP:
        return "pumpkin_top.png";
    case FACE_RAIL_ACTIVATOR_POWERED:
        return "rail_activator_powered.png";
    case FACE_RAIL_ACTIVATOR:
        return "rail_activator.png";
    case FACE_RAIL_DETECTOR_POWERED:
        return "rail_detector_powered.png";
    case FACE_RAIL_DETECTOR:
        return "rail_detector.png";
    case FACE_RAIL_GOLDEN_POWERED:
        return "rail_golden_powered.png";
    case FACE_RAIL_GOLDEN:
        return "rail_golden.png";
    case FACE_RAIL_NORMAL_TURNED:
        return "rail_normal_turned.png";
    case FACE_RAIL_NORMAL:
        return "rail_normal.png";
    case FACE_REDSTONE_BLOCK:
        return "redstone_block.png";
    case FACE_REDSTONE_DUST_CROSS_OVERLAY:
        return "redstone_dust_cross_overlay.png";
    case FACE_REDSTONE_DUST_CROSS:
        return "redstone_dust_cross.png";
    case FACE_REDSTONE_DUST_LINE_OVERLAY:
        return "redstone_dust_line_overlay.png";
    case FACE_REDSTONE_DUST_LINE:
        return "redstone_dust_line.png";
    case FACE_REDSTONE_LAMP_OFF:
        return "redstone_lamp_off.png";
    case FACE_REDSTONE_LAMP_ON:
        return "redstone_lamp_on.png";
    case FACE_REDSTONE_ORE:
        return "redstone_ore.png";
    case FACE_REDSTONE_TORCH_OFF:
        return "redstone_torch_off.png";
    case FACE_REDSTONE_TORCH_ON:
        return "redstone_torch_on.png";
    case FACE_REEDS:
        return "reeds.png";
    case FACE_REPEATER_OFF:
        return "repeater_off.png";
    case FACE_REPEATER_ON:
        return "repeater_on.png";
    case FACE_SAND:
        return "sand.png";
    case FACE_SANDSTONE_BOTTOM:
        return "sandstone_bottom.png";
    case FACE_SANDSTONE_CARVED:
        return "sandstone_carved.png";
    case FACE_SANDSTONE_NORMAL:
        return "sandstone_normal.png";
    case FACE_SANDSTONE_SMOOTH:
        return "sandstone_smooth.png";
    case FACE_SANDSTONE_TOP:
        return "sandstone_top.png";
    case FACE_SAPLING_BIRCH:
        return "sapling_birch.png";
    case FACE_SAPLING_JUNGLE:
        return "sapling_jungle.png";
    case FACE_SAPLING_OAK:
        return "sapling_oak.png";
    case FACE_SAPLING_SPRUCE:
        return "sapling_spruce.png";
    case FACE_SNOW:
        return "snow.png";
    case FACE_SOUL_SAND:
        return "soul_sand.png";
    case FACE_SPONGE:
        return "sponge.png";
    case FACE_STONE_SLAB_SIDE:
        return "stone_slab_side.png";
    case FACE_STONE_SLAB_TOP:
        return "stone_slab_top.png";
    case FACE_STONE:
        return "stone.png";
    case FACE_STONEBRICK_CARVED:
        return "stonebrick_carved.png";
    case FACE_STONEBRICK_CRACKED:
        return "stonebrick_cracked.png";
    case FACE_STONEBRICK_MOSSY:
        return "stonebrick_mossy.png";
    case FACE_STONEBRICK:
        return "stonebrick.png";
    case FACE_TALLGRASS:
        return "tallgrass.png";
    case FACE_TNT_BOTTOM:
        return "tnt_bottom.png";
    case FACE_TNT_SIDE:
        return "tnt_side.png";
    case FACE_TNT_TOP:
        return "tnt_top.png";
    case FACE_TORCH_ON:
        return "torch_on.png";
    case FACE_TRAPDOOR:
        return "trapdoor.png";
    case FACE_VINE:
        return "vine.png";
    case FACE_WATER_FLOW_STRAIGHT:
        return "water_flow.png";
    case FACE_WATER_FLOW_DIAGONAL:
        return "water_flow.png";
    case FACE_WATER_STILL:
        return "water_still.png";
    case FACE_WEB:
        return "web.png";
    case FACE_WHEAT_STAGE_0:
        return "wheat_stage_0.png";
    case FACE_WHEAT_STAGE_1:
        return "wheat_stage_1.png";
    case FACE_WHEAT_STAGE_2:
        return "wheat_stage_2.png";
    case FACE_WHEAT_STAGE_3:
        return "wheat_stage_3.png";
    case FACE_WHEAT_STAGE_4:
        return "wheat_stage_4.png";
    case FACE_WHEAT_STAGE_5:
        return "wheat_stage_5.png";
    case FACE_WHEAT_STAGE_6:
        return "wheat_stage_6.png";
    case FACE_WHEAT_STAGE_7:
        return "wheat_stage_7.png";
    case FACE_WOOL_COLORED_BLACK:
        return "wool_colored_black.png";
    case FACE_WOOL_COLORED_BLUE:
        return "wool_colored_blue.png";
    case FACE_WOOL_COLORED_BROWN:
        return "wool_colored_brown.png";
    case FACE_WOOL_COLORED_CYAN:
        return "wool_colored_cyan.png";
    case FACE_WOOL_COLORED_GRAY:
        return "wool_colored_gray.png";
    case FACE_WOOL_COLORED_GREEN:
        return "wool_colored_green.png";
    case FACE_WOOL_COLORED_LIGHT_BLUE:
        return "wool_colored_light_blue.png";
    case FACE_WOOL_COLORED_LIME:
        return "wool_colored_lime.png";
    case FACE_WOOL_COLORED_MAGENTA:
        return "wool_colored_magenta.png";
    case FACE_WOOL_COLORED_ORANGE:
        return "wool_colored_orange.png";
    case FACE_WOOL_COLORED_PINK:
        return "wool_colored_pink.png";
    case FACE_WOOL_COLORED_PURPLE:
        return "wool_colored_purple.png";
    case FACE_WOOL_COLORED_RED:
        return "wool_colored_red.png";
    case FACE_WOOL_COLORED_SILVER:
        return "wool_colored_silver.png";
    case FACE_WOOL_COLORED_WHITE:
        return "wool_colored_white.png";
    case FACE_WOOL_COLORED_YELLOW:
        return "wool_colored_yellow.png";
    }
    return NULL;
}

static const terrain_face_id_t get_face_from_fname(const char* filename)
{
    if (filename == NULL)
        return FACE_DEBUG;
    size_t len = strlen(filename);
    if (len == 16 && *filename == 'b' && strcmp("bed_feet_end.png", filename) == 0)
        return FACE_BED_FEET_END;
    if (len == 17 && *filename == 'b' && strcmp("bed_feet_side.png", filename) == 0)
        return FACE_BED_FEET_SIDE;
    if (len == 16 && *filename == 'b' && strcmp("bed_feet_top.png", filename) == 0)
        return FACE_BED_FEET_TOP;
    if (len == 16 && *filename == 'b' && strcmp("bed_head_end.png", filename) == 0)
        return FACE_BED_HEAD_END;
    if (len == 17 && *filename == 'b' && strcmp("bed_head_side.png", filename) == 0)
        return FACE_BED_HEAD_SIDE;
    if (len == 16 && *filename == 'b' && strcmp("bed_head_top.png", filename) == 0)
        return FACE_BED_HEAD_TOP;
    if (len == 11 && *filename == 'b' && strcmp("bedrock.png", filename) == 0)
        return FACE_BEDROCK;
    if (len == 13 && *filename == 'b' && strcmp("bookshelf.png", filename) == 0)
        return FACE_BOOKSHELF;
    if (len == 9 && *filename == 'b' && strcmp("brick.png", filename) == 0)
        return FACE_BRICK;
    if (len == 17 && *filename == 'c' && strcmp("cactus_bottom.png", filename) == 0)
        return FACE_CACTUS_BOTTOM;
    if (len == 15 && *filename == 'c' && strcmp("cactus_side.png", filename) == 0)
        return FACE_CACTUS_SIDE;
    if (len == 14 && *filename == 'c' && strcmp("cactus_top.png", filename) == 0)
        return FACE_CACTUS_TOP;
    if (len == 15 && *filename == 'c' && strcmp("cake_bottom.png", filename) == 0)
        return FACE_CAKE_BOTTOM;
    if (len == 14 && *filename == 'c' && strcmp("cake_inner.png", filename) == 0)
        return FACE_CAKE_INNER;
    if (len == 13 && *filename == 'c' && strcmp("cake_side.png", filename) == 0)
        return FACE_CAKE_SIDE;
    if (len == 12 && *filename == 'c' && strcmp("cake_top.png", filename) == 0)
        return FACE_CAKE_TOP;
    if (len == 8 && *filename == 'c' && strcmp("clay.png", filename) == 0)
        return FACE_CLAY;
    if (len == 12 && *filename == 'c' && strcmp("coal_ore.png", filename) == 0)
        return FACE_COAL_ORE;
    if (len == 21 && *filename == 'c' && strcmp("cobblestone_mossy.png", filename) == 0)
        return FACE_COBBLESTONE_MOSSY;
    if (len == 15 && *filename == 'c' && strcmp("cobblestone.png", filename) == 0)
        return FACE_COBBLESTONE;
    if (len == 24 && *filename == 'c' && strcmp("crafting_table_front.png", filename) == 0)
        return FACE_CRAFTING_TABLE_FRONT;
    if (len == 23 && *filename == 'c' && strcmp("crafting_table_side.png", filename) == 0)
        return FACE_CRAFTING_TABLE_SIDE;
    if (len == 22 && *filename == 'c' && strcmp("crafting_table_top.png", filename) == 0)
        return FACE_CRAFTING_TABLE_TOP;
    if (len == 26 && *filename == 'd' && strcmp("daylight_detector_side.png", filename) == 0)
        return FACE_DAYLIGHT_DETECTOR_SIDE;
    if (len == 25 && *filename == 'd' && strcmp("daylight_detector_top.png", filename) == 0)
        return FACE_DAYLIGHT_DETECTOR_TOP;
    if (len == 12 && *filename == 'd' && strcmp("deadbush.png", filename) == 0)
        return FACE_DEADBUSH;
    if (len == 19 && *filename == 'd' && strcmp("destroy_stage_0.png", filename) == 0)
        return FACE_DESTROY_STAGE_0;
    if (len == 19 && *filename == 'd' && strcmp("destroy_stage_1.png", filename) == 0)
        return FACE_DESTROY_STAGE_1;
    if (len == 19 && *filename == 'd' && strcmp("destroy_stage_2.png", filename) == 0)
        return FACE_DESTROY_STAGE_2;
    if (len == 19 && *filename == 'd' && strcmp("destroy_stage_3.png", filename) == 0)
        return FACE_DESTROY_STAGE_3;
    if (len == 19 && *filename == 'd' && strcmp("destroy_stage_4.png", filename) == 0)
        return FACE_DESTROY_STAGE_4;
    if (len == 19 && *filename == 'd' && strcmp("destroy_stage_5.png", filename) == 0)
        return FACE_DESTROY_STAGE_5;
    if (len == 19 && *filename == 'd' && strcmp("destroy_stage_6.png", filename) == 0)
        return FACE_DESTROY_STAGE_6;
    if (len == 19 && *filename == 'd' && strcmp("destroy_stage_7.png", filename) == 0)
        return FACE_DESTROY_STAGE_7;
    if (len == 19 && *filename == 'd' && strcmp("destroy_stage_8.png", filename) == 0)
        return FACE_DESTROY_STAGE_8;
    if (len == 19 && *filename == 'd' && strcmp("destroy_stage_9.png", filename) == 0)
        return FACE_DESTROY_STAGE_9;
    if (len == 17 && *filename == 'd' && strcmp("diamond_block.png", filename) == 0)
        return FACE_DIAMOND_BLOCK;
    if (len == 15 && *filename == 'd' && strcmp("diamond_ore.png", filename) == 0)
        return FACE_DIAMOND_ORE;
    if (len == 8 && *filename == 'd' && strcmp("dirt.png", filename) == 0)
        return FACE_DIRT;
    if (len == 30 && *filename == 'd' && strcmp("dispenser_front_horizontal.png", filename) == 0)
        return FACE_DISPENSER_FRONT_HORIZONTAL;
    if (len == 28 && *filename == 'd' && strcmp("dispenser_front_vertical.png", filename) == 0)
        return FACE_DISPENSER_FRONT_VERTICAL;
    if (len == 19 && *filename == 'd' && strcmp("door_iron_lower.png", filename) == 0)
        return FACE_DOOR_IRON_LOWER;
    if (len == 19 && *filename == 'd' && strcmp("door_iron_upper.png", filename) == 0)
        return FACE_DOOR_IRON_UPPER;
    if (len == 19 && *filename == 'd' && strcmp("door_wood_lower.png", filename) == 0)
        return FACE_DOOR_WOOD_LOWER;
    if (len == 19 && *filename == 'd' && strcmp("door_wood_upper.png", filename) == 0)
        return FACE_DOOR_WOOD_UPPER;
    if (len == 17 && *filename == 'e' && strcmp("emerald_block.png", filename) == 0)
        return FACE_EMERALD_BLOCK;
    if (len == 15 && *filename == 'e' && strcmp("emerald_ore.png", filename) == 0)
        return FACE_EMERALD_ORE;
    if (len == 27 && *filename == 'e' && strcmp("enchanting_table_bottom.png", filename) == 0)
        return FACE_ENCHANTING_TABLE_BOTTOM;
    if (len == 25 && *filename == 'e' && strcmp("enchanting_table_side.png", filename) == 0)
        return FACE_ENCHANTING_TABLE_SIDE;
    if (len == 24 && *filename == 'e' && strcmp("enchanting_table_top.png", filename) == 0)
        return FACE_ENCHANTING_TABLE_TOP;
    if (len == 16 && *filename == 'f' && strcmp("farmland_dry.png", filename) == 0)
        return FACE_FARMLAND_DRY;
    if (len == 16 && *filename == 'f' && strcmp("farmland_wet.png", filename) == 0)
        return FACE_FARMLAND_WET;
    if (len == 8 && *filename == 'f' && strcmp("fern.png", filename) == 0)
        return FACE_FERN;
    if (len == 16 && *filename == 'f' && strcmp("fire_layer_0.png", filename) == 0)
        return FACE_FIRE_LAYER_0;
    if (len == 16 && *filename == 'f' && strcmp("fire_layer_1.png", filename) == 0)
        return FACE_FIRE_LAYER_1;
    if (len == 20 && *filename == 'f' && strcmp("flower_dandelion.png", filename) == 0)
        return FACE_FLOWER_DANDELION;
    if (len == 14 && *filename == 'f' && strcmp("flower_pot.png", filename) == 0)
        return FACE_FLOWER_POT;
    if (len == 15 && *filename == 'f' && strcmp("flower_rose.png", filename) == 0)
        return FACE_FLOWER_ROSE;
    if (len == 21 && *filename == 'f' && strcmp("furnace_front_off.png", filename) == 0)
        return FACE_FURNACE_FRONT_OFF;
    if (len == 20 && *filename == 'f' && strcmp("furnace_front_on.png", filename) == 0)
        return FACE_FURNACE_FRONT_ON;
    if (len == 16 && *filename == 'f' && strcmp("furnace_side.png", filename) == 0)
        return FACE_FURNACE_SIDE;
    if (len == 15 && *filename == 'f' && strcmp("furnace_top.png", filename) == 0)
        return FACE_FURNACE_TOP;
    if (len == 18 && *filename == 'g' && strcmp("glass_pane_top.png", filename) == 0)
        return FACE_GLASS_PANE_TOP;
    if (len == 9 && *filename == 'g' && strcmp("glass.png", filename) == 0)
        return FACE_GLASS;
    if (len == 13 && *filename == 'g' && strcmp("glowstone.png", filename) == 0)
        return FACE_GLOWSTONE;
    if (len == 14 && *filename == 'g' && strcmp("gold_block.png", filename) == 0)
        return FACE_GOLD_BLOCK;
    if (len == 12 && *filename == 'g' && strcmp("gold_ore.png", filename) == 0)
        return FACE_GOLD_ORE;
    if (len == 22 && *filename == 'g' && strcmp("grass_side_overlay.png", filename) == 0)
        return FACE_GRASS_SIDE_OVERLAY;
    if (len == 21 && *filename == 'g' && strcmp("grass_side_snowed.png", filename) == 0)
        return FACE_GRASS_SIDE_SNOWED;
    if (len == 14 && *filename == 'g' && strcmp("grass_side.png", filename) == 0)
        return FACE_GRASS_SIDE;
    if (len == 13 && *filename == 'g' && strcmp("grass_top.png", filename) == 0)
        return FACE_GRASS_TOP;
    if (len == 10 && *filename == 'g' && strcmp("gravel.png", filename) == 0)
        return FACE_GRAVEL;
    if (len == 7 && *filename == 'i' && strcmp("ice.png", filename) == 0)
        return FACE_ICE;
    if (len == 13 && *filename == 'i' && strcmp("iron_bars.png", filename) == 0)
        return FACE_IRON_BARS;
    if (len == 14 && *filename == 'i' && strcmp("iron_block.png", filename) == 0)
        return FACE_IRON_BLOCK;
    if (len == 12 && *filename == 'i' && strcmp("iron_ore.png", filename) == 0)
        return FACE_IRON_ORE;
    if (len == 16 && *filename == 'j' && strcmp("jukebox_side.png", filename) == 0)
        return FACE_JUKEBOX_SIDE;
    if (len == 15 && *filename == 'j' && strcmp("jukebox_top.png", filename) == 0)
        return FACE_JUKEBOX_TOP;
    if (len == 10 && *filename == 'l' && strcmp("ladder.png", filename) == 0)
        return FACE_LADDER;
    if (len == 15 && *filename == 'l' && strcmp("lapis_block.png", filename) == 0)
        return FACE_LAPIS_BLOCK;
    if (len == 13 && *filename == 'l' && strcmp("lapis_ore.png", filename) == 0)
        return FACE_LAPIS_ORE;
    if (len == 13 && *filename == 'l' && strcmp("lava_flow.png", filename) == 0)
        return FACE_LAVA_FLOW_STRAIGHT;
    if (len == 13 && *filename == 'l' && strcmp("lava_flow.png", filename) == 0)
        return FACE_LAVA_FLOW_DIAGONAL;
    if (len == 14 && *filename == 'l' && strcmp("lava_still.png", filename) == 0)
        return FACE_LAVA_STILL;
    if (len == 23 && *filename == 'l' && strcmp("leaves_birch_opaque.png", filename) == 0)
        return FACE_LEAVES_BIRCH_OPAQUE;
    if (len == 16 && *filename == 'l' && strcmp("leaves_birch.png", filename) == 0)
        return FACE_LEAVES_BIRCH;
    if (len == 24 && *filename == 'l' && strcmp("leaves_jungle_opaque.png", filename) == 0)
        return FACE_LEAVES_JUNGLE_OPAQUE;
    if (len == 17 && *filename == 'l' && strcmp("leaves_jungle.png", filename) == 0)
        return FACE_LEAVES_JUNGLE;
    if (len == 21 && *filename == 'l' && strcmp("leaves_oak_opaque.png", filename) == 0)
        return FACE_LEAVES_OAK_OPAQUE;
    if (len == 14 && *filename == 'l' && strcmp("leaves_oak.png", filename) == 0)
        return FACE_LEAVES_OAK;
    if (len == 24 && *filename == 'l' && strcmp("leaves_spruce_opaque.png", filename) == 0)
        return FACE_LEAVES_SPRUCE_OPAQUE;
    if (len == 17 && *filename == 'l' && strcmp("leaves_spruce.png", filename) == 0)
        return FACE_LEAVES_SPRUCE;
    if (len == 9 && *filename == 'l' && strcmp("lever.png", filename) == 0)
        return FACE_LEVER;
    if (len == 17 && *filename == 'l' && strcmp("log_birch_top.png", filename) == 0)
        return FACE_LOG_BIRCH_TOP;
    if (len == 13 && *filename == 'l' && strcmp("log_birch.png", filename) == 0)
        return FACE_LOG_BIRCH;
    if (len == 18 && *filename == 'l' && strcmp("log_jungle_top.png", filename) == 0)
        return FACE_LOG_JUNGLE_TOP;
    if (len == 14 && *filename == 'l' && strcmp("log_jungle.png", filename) == 0)
        return FACE_LOG_JUNGLE;
    if (len == 15 && *filename == 'l' && strcmp("log_oak_top.png", filename) == 0)
        return FACE_LOG_OAK_TOP;
    if (len == 11 && *filename == 'l' && strcmp("log_oak.png", filename) == 0)
        return FACE_LOG_OAK;
    if (len == 18 && *filename == 'l' && strcmp("log_spruce_top.png", filename) == 0)
        return FACE_LOG_SPRUCE_TOP;
    if (len == 14 && *filename == 'l' && strcmp("log_spruce.png", filename) == 0)
        return FACE_LOG_SPRUCE;
    if (len == 14 && *filename == 'm' && strcmp("melon_side.png", filename) == 0)
        return FACE_MELON_SIDE;
    if (len == 24 && *filename == 'm' && strcmp("melon_stem_connected.png", filename) == 0)
        return FACE_MELON_STEM_CONNECTED;
    if (len == 27 && *filename == 'm' && strcmp("melon_stem_disconnected.png", filename) == 0)
        return FACE_MELON_STEM_DISCONNECTED;
    if (len == 13 && *filename == 'm' && strcmp("melon_top.png", filename) == 0)
        return FACE_MELON_TOP;
    if (len == 15 && *filename == 'm' && strcmp("mob_spawner.png", filename) == 0)
        return FACE_MOB_SPAWNER;
    if (len == 25 && *filename == 'm' && strcmp("mushroom_block_inside.png", filename) == 0)
        return FACE_MUSHROOM_BLOCK_INSIDE;
    if (len == 29 && *filename == 'm' && strcmp("mushroom_block_skin_brown.png", filename) == 0)
        return FACE_MUSHROOM_BLOCK_SKIN_BROWN;
    if (len == 27 && *filename == 'm' && strcmp("mushroom_block_skin_red.png", filename) == 0)
        return FACE_MUSHROOM_BLOCK_SKIN_RED;
    if (len == 28 && *filename == 'm' && strcmp("mushroom_block_skin_stem.png", filename) == 0)
        return FACE_MUSHROOM_BLOCK_SKIN_STEM;
    if (len == 18 && *filename == 'm' && strcmp("mushroom_brown.png", filename) == 0)
        return FACE_MUSHROOM_BROWN;
    if (len == 16 && *filename == 'm' && strcmp("mushroom_red.png", filename) == 0)
        return FACE_MUSHROOM_RED;
    if (len == 17 && *filename == 'm' && strcmp("mycelium_side.png", filename) == 0)
        return FACE_MYCELIUM_SIDE;
    if (len == 16 && *filename == 'm' && strcmp("mycelium_top.png", filename) == 0)
        return FACE_MYCELIUM_TOP;
    if (len == 16 && *filename == 'n' && strcmp("nether_brick.png", filename) == 0)
        return FACE_NETHER_BRICK;
    if (len == 14 && *filename == 'n' && strcmp("netherrack.png", filename) == 0)
        return FACE_NETHERRACK;
    if (len == 13 && *filename == 'n' && strcmp("noteblock.png", filename) == 0)
        return FACE_NOTEBLOCK;
    if (len == 12 && *filename == 'o' && strcmp("obsidian.png", filename) == 0)
        return FACE_OBSIDIAN;
    if (len == 17 && *filename == 'p' && strcmp("piston_bottom.png", filename) == 0)
        return FACE_PISTON_BOTTOM;
    if (len == 16 && *filename == 'p' && strcmp("piston_inner.png", filename) == 0)
        return FACE_PISTON_INNER;
    if (len == 15 && *filename == 'p' && strcmp("piston_side.png", filename) == 0)
        return FACE_PISTON_SIDE;
    if (len == 21 && *filename == 'p' && strcmp("piston_top_normal.png", filename) == 0)
        return FACE_PISTON_TOP_NORMAL;
    if (len == 21 && *filename == 'p' && strcmp("piston_top_sticky.png", filename) == 0)
        return FACE_PISTON_TOP_STICKY;
    if (len == 16 && *filename == 'p' && strcmp("planks_birch.png", filename) == 0)
        return FACE_PLANKS_BIRCH;
    if (len == 17 && *filename == 'p' && strcmp("planks_jungle.png", filename) == 0)
        return FACE_PLANKS_JUNGLE;
    if (len == 14 && *filename == 'p' && strcmp("planks_oak.png", filename) == 0)
        return FACE_PLANKS_OAK;
    if (len == 17 && *filename == 'p' && strcmp("planks_spruce.png", filename) == 0)
        return FACE_PLANKS_SPRUCE;
    if (len == 10 && *filename == 'p' && strcmp("portal.png", filename) == 0)
        return FACE_PORTAL;
    if (len == 20 && *filename == 'p' && strcmp("pumpkin_face_off.png", filename) == 0)
        return FACE_PUMPKIN_FACE_OFF;
    if (len == 19 && *filename == 'p' && strcmp("pumpkin_face_on.png", filename) == 0)
        return FACE_PUMPKIN_FACE_ON;
    if (len == 16 && *filename == 'p' && strcmp("pumpkin_side.png", filename) == 0)
        return FACE_PUMPKIN_SIDE;
    if (len == 26 && *filename == 'p' && strcmp("pumpkin_stem_connected.png", filename) == 0)
        return FACE_PUMPKIN_STEM_CONNECTED;
    if (len == 29 && *filename == 'p' && strcmp("pumpkin_stem_disconnected.png", filename) == 0)
        return FACE_PUMPKIN_STEM_DISCONNECTED;
    if (len == 15 && *filename == 'p' && strcmp("pumpkin_top.png", filename) == 0)
        return FACE_PUMPKIN_TOP;
    if (len == 26 && *filename == 'r' && strcmp("rail_activator_powered.png", filename) == 0)
        return FACE_RAIL_ACTIVATOR_POWERED;
    if (len == 18 && *filename == 'r' && strcmp("rail_activator.png", filename) == 0)
        return FACE_RAIL_ACTIVATOR;
    if (len == 25 && *filename == 'r' && strcmp("rail_detector_powered.png", filename) == 0)
        return FACE_RAIL_DETECTOR_POWERED;
    if (len == 17 && *filename == 'r' && strcmp("rail_detector.png", filename) == 0)
        return FACE_RAIL_DETECTOR;
    if (len == 23 && *filename == 'r' && strcmp("rail_golden_powered.png", filename) == 0)
        return FACE_RAIL_GOLDEN_POWERED;
    if (len == 15 && *filename == 'r' && strcmp("rail_golden.png", filename) == 0)
        return FACE_RAIL_GOLDEN;
    if (len == 22 && *filename == 'r' && strcmp("rail_normal_turned.png", filename) == 0)
        return FACE_RAIL_NORMAL_TURNED;
    if (len == 15 && *filename == 'r' && strcmp("rail_normal.png", filename) == 0)
        return FACE_RAIL_NORMAL;
    if (len == 18 && *filename == 'r' && strcmp("redstone_block.png", filename) == 0)
        return FACE_REDSTONE_BLOCK;
    if (len == 31 && *filename == 'r' && strcmp("redstone_dust_cross_overlay.png", filename) == 0)
        return FACE_REDSTONE_DUST_CROSS_OVERLAY;
    if (len == 23 && *filename == 'r' && strcmp("redstone_dust_cross.png", filename) == 0)
        return FACE_REDSTONE_DUST_CROSS;
    if (len == 30 && *filename == 'r' && strcmp("redstone_dust_line_overlay.png", filename) == 0)
        return FACE_REDSTONE_DUST_LINE_OVERLAY;
    if (len == 22 && *filename == 'r' && strcmp("redstone_dust_line.png", filename) == 0)
        return FACE_REDSTONE_DUST_LINE;
    if (len == 21 && *filename == 'r' && strcmp("redstone_lamp_off.png", filename) == 0)
        return FACE_REDSTONE_LAMP_OFF;
    if (len == 20 && *filename == 'r' && strcmp("redstone_lamp_on.png", filename) == 0)
        return FACE_REDSTONE_LAMP_ON;
    if (len == 16 && *filename == 'r' && strcmp("redstone_ore.png", filename) == 0)
        return FACE_REDSTONE_ORE;
    if (len == 22 && *filename == 'r' && strcmp("redstone_torch_off.png", filename) == 0)
        return FACE_REDSTONE_TORCH_OFF;
    if (len == 21 && *filename == 'r' && strcmp("redstone_torch_on.png", filename) == 0)
        return FACE_REDSTONE_TORCH_ON;
    if (len == 9 && *filename == 'r' && strcmp("reeds.png", filename) == 0)
        return FACE_REEDS;
    if (len == 16 && *filename == 'r' && strcmp("repeater_off.png", filename) == 0)
        return FACE_REPEATER_OFF;
    if (len == 15 && *filename == 'r' && strcmp("repeater_on.png", filename) == 0)
        return FACE_REPEATER_ON;
    if (len == 8 && *filename == 's' && strcmp("sand.png", filename) == 0)
        return FACE_SAND;
    if (len == 20 && *filename == 's' && strcmp("sandstone_bottom.png", filename) == 0)
        return FACE_SANDSTONE_BOTTOM;
    if (len == 20 && *filename == 's' && strcmp("sandstone_carved.png", filename) == 0)
        return FACE_SANDSTONE_CARVED;
    if (len == 20 && *filename == 's' && strcmp("sandstone_normal.png", filename) == 0)
        return FACE_SANDSTONE_NORMAL;
    if (len == 20 && *filename == 's' && strcmp("sandstone_smooth.png", filename) == 0)
        return FACE_SANDSTONE_SMOOTH;
    if (len == 17 && *filename == 's' && strcmp("sandstone_top.png", filename) == 0)
        return FACE_SANDSTONE_TOP;
    if (len == 17 && *filename == 's' && strcmp("sapling_birch.png", filename) == 0)
        return FACE_SAPLING_BIRCH;
    if (len == 18 && *filename == 's' && strcmp("sapling_jungle.png", filename) == 0)
        return FACE_SAPLING_JUNGLE;
    if (len == 15 && *filename == 's' && strcmp("sapling_oak.png", filename) == 0)
        return FACE_SAPLING_OAK;
    if (len == 18 && *filename == 's' && strcmp("sapling_spruce.png", filename) == 0)
        return FACE_SAPLING_SPRUCE;
    if (len == 8 && *filename == 's' && strcmp("snow.png", filename) == 0)
        return FACE_SNOW;
    if (len == 13 && *filename == 's' && strcmp("soul_sand.png", filename) == 0)
        return FACE_SOUL_SAND;
    if (len == 10 && *filename == 's' && strcmp("sponge.png", filename) == 0)
        return FACE_SPONGE;
    if (len == 19 && *filename == 's' && strcmp("stone_slab_side.png", filename) == 0)
        return FACE_STONE_SLAB_SIDE;
    if (len == 18 && *filename == 's' && strcmp("stone_slab_top.png", filename) == 0)
        return FACE_STONE_SLAB_TOP;
    if (len == 9 && *filename == 's' && strcmp("stone.png", filename) == 0)
        return FACE_STONE;
    if (len == 21 && *filename == 's' && strcmp("stonebrick_carved.png", filename) == 0)
        return FACE_STONEBRICK_CARVED;
    if (len == 22 && *filename == 's' && strcmp("stonebrick_cracked.png", filename) == 0)
        return FACE_STONEBRICK_CRACKED;
    if (len == 20 && *filename == 's' && strcmp("stonebrick_mossy.png", filename) == 0)
        return FACE_STONEBRICK_MOSSY;
    if (len == 14 && *filename == 's' && strcmp("stonebrick.png", filename) == 0)
        return FACE_STONEBRICK;
    if (len == 13 && *filename == 't' && strcmp("tallgrass.png", filename) == 0)
        return FACE_TALLGRASS;
    if (len == 14 && *filename == 't' && strcmp("tnt_bottom.png", filename) == 0)
        return FACE_TNT_BOTTOM;
    if (len == 12 && *filename == 't' && strcmp("tnt_side.png", filename) == 0)
        return FACE_TNT_SIDE;
    if (len == 11 && *filename == 't' && strcmp("tnt_top.png", filename) == 0)
        return FACE_TNT_TOP;
    if (len == 12 && *filename == 't' && strcmp("torch_on.png", filename) == 0)
        return FACE_TORCH_ON;
    if (len == 12 && *filename == 't' && strcmp("trapdoor.png", filename) == 0)
        return FACE_TRAPDOOR;
    if (len == 8 && *filename == 'v' && strcmp("vine.png", filename) == 0)
        return FACE_VINE;
    if (len == 14 && *filename == 'w' && strcmp("water_flow.png", filename) == 0)
        return FACE_WATER_FLOW_STRAIGHT;
    if (len == 14 && *filename == 'w' && strcmp("water_flow.png", filename) == 0)
        return FACE_WATER_FLOW_DIAGONAL;
    if (len == 15 && *filename == 'w' && strcmp("water_still.png", filename) == 0)
        return FACE_WATER_STILL;
    if (len == 7 && *filename == 'w' && strcmp("web.png", filename) == 0)
        return FACE_WEB;
    if (len == 17 && *filename == 'w' && strcmp("wheat_stage_0.png", filename) == 0)
        return FACE_WHEAT_STAGE_0;
    if (len == 17 && *filename == 'w' && strcmp("wheat_stage_1.png", filename) == 0)
        return FACE_WHEAT_STAGE_1;
    if (len == 17 && *filename == 'w' && strcmp("wheat_stage_2.png", filename) == 0)
        return FACE_WHEAT_STAGE_2;
    if (len == 17 && *filename == 'w' && strcmp("wheat_stage_3.png", filename) == 0)
        return FACE_WHEAT_STAGE_3;
    if (len == 17 && *filename == 'w' && strcmp("wheat_stage_4.png", filename) == 0)
        return FACE_WHEAT_STAGE_4;
    if (len == 17 && *filename == 'w' && strcmp("wheat_stage_5.png", filename) == 0)
        return FACE_WHEAT_STAGE_5;
    if (len == 17 && *filename == 'w' && strcmp("wheat_stage_6.png", filename) == 0)
        return FACE_WHEAT_STAGE_6;
    if (len == 17 && *filename == 'w' && strcmp("wheat_stage_7.png", filename) == 0)
        return FACE_WHEAT_STAGE_7;
    if (len == 22 && *filename == 'w' && strcmp("wool_colored_black.png", filename) == 0)
        return FACE_WOOL_COLORED_BLACK;
    if (len == 21 && *filename == 'w' && strcmp("wool_colored_blue.png", filename) == 0)
        return FACE_WOOL_COLORED_BLUE;
    if (len == 22 && *filename == 'w' && strcmp("wool_colored_brown.png", filename) == 0)
        return FACE_WOOL_COLORED_BROWN;
    if (len == 21 && *filename == 'w' && strcmp("wool_colored_cyan.png", filename) == 0)
        return FACE_WOOL_COLORED_CYAN;
    if (len == 21 && *filename == 'w' && strcmp("wool_colored_gray.png", filename) == 0)
        return FACE_WOOL_COLORED_GRAY;
    if (len == 22 && *filename == 'w' && strcmp("wool_colored_green.png", filename) == 0)
        return FACE_WOOL_COLORED_GREEN;
    if (len == 27 && *filename == 'w' && strcmp("wool_colored_light_blue.png", filename) == 0)
        return FACE_WOOL_COLORED_LIGHT_BLUE;
    if (len == 21 && *filename == 'w' && strcmp("wool_colored_lime.png", filename) == 0)
        return FACE_WOOL_COLORED_LIME;
    if (len == 24 && *filename == 'w' && strcmp("wool_colored_magenta.png", filename) == 0)
        return FACE_WOOL_COLORED_MAGENTA;
    if (len == 23 && *filename == 'w' && strcmp("wool_colored_orange.png", filename) == 0)
        return FACE_WOOL_COLORED_ORANGE;
    if (len == 21 && *filename == 'w' && strcmp("wool_colored_pink.png", filename) == 0)
        return FACE_WOOL_COLORED_PINK;
    if (len == 23 && *filename == 'w' && strcmp("wool_colored_purple.png", filename) == 0)
        return FACE_WOOL_COLORED_PURPLE;
    if (len == 20 && *filename == 'w' && strcmp("wool_colored_red.png", filename) == 0)
        return FACE_WOOL_COLORED_RED;
    if (len == 23 && *filename == 'w' && strcmp("wool_colored_silver.png", filename) == 0)
        return FACE_WOOL_COLORED_SILVER;
    if (len == 22 && *filename == 'w' && strcmp("wool_colored_white.png", filename) == 0)
        return FACE_WOOL_COLORED_WHITE;
    if (len == 23 && *filename == 'w' && strcmp("wool_colored_yellow.png", filename) == 0)
        return FACE_WOOL_COLORED_YELLOW;
    return FACE_DEBUG;
}

static const terrain_face_t get_face_sub_coords(const terrain_face_id_t id)
{
    switch (id)
    {
    case FACE_LAVA_FLOW_STRAIGHT:
        return {
            glm::vec2(float(0.000000), float(0.000000)),
            glm::vec2(float(0.000000), float(0.500000)),
            glm::vec2(float(0.500000), float(0.000000)),
            glm::vec2(float(0.500000), float(0.500000)),
        };
    case FACE_LAVA_FLOW_DIAGONAL:
        return {
            glm::vec2(float(0.146447), float(0.500000)),
            glm::vec2(float(0.500000), float(0.146447)),
            glm::vec2(float(0.500000), float(0.853553)),
            glm::vec2(float(0.853553), float(0.500000)),
        };
    case FACE_WATER_FLOW_STRAIGHT:
        return {
            glm::vec2(float(0.000000), float(0.000000)),
            glm::vec2(float(0.000000), float(0.500000)),
            glm::vec2(float(0.500000), float(0.000000)),
            glm::vec2(float(0.500000), float(0.500000)),
        };
    case FACE_WATER_FLOW_DIAGONAL:
        return {
            glm::vec2(float(0.500000), float(0.146447)),
            glm::vec2(float(0.146447), float(0.500000)),
            glm::vec2(float(0.500000), float(0.853553)),
            glm::vec2(float(0.853553), float(0.500000)),
        };
    default:
        return { glm::vec2(0, 0), glm::vec2(1, 0), glm::vec2(0, 1), glm::vec2(1, 1) };
    }
}

}
#endif
