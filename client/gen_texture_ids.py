#!/bin/env python3
# SPDX-License-Identifier: MIT
#
# SPDX-FileCopyrightText: Copyright (c) 2025 Ian Hangartner <icrashstuff at outlook dot com>
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
import math
header_header = """/* SPDX-License-Identifier: MIT
 *
 * SPDX-FileCopyrightText: Copyright (c) 2025 Ian Hangartner <icrashstuff at outlook dot com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/* WARNING: This file is automatically generated by gen_texture_ids.py, DO NOT EDIT */

#ifndef MCS_B181_CLIENT_TEXTURE_IDS_H
#define MCS_B181_CLIENT_TEXTURE_IDS_H

#include <SDL3/SDL_stdinc.h>
#include <glm/glm.hpp>

namespace mc_id
{

struct terrain_face_t
{
    glm::vec2 corners[4];
};

#define MCS_B181_CLIENT_TEXTURE_IDS_H_FUNC

"""

header_footer = """
}

#undef MCS_B181_CLIENT_TEXTURE_IDS_H_FUNC

#endif /* MCS_B181_CLIENT_TEXTURE_IDS_H */
"""

class texture_t:
    def __init__(self, texture_name, name = None, uv = None):
        if(name == None):
            name = texture_name.upper().replace(".PNG", "")
        self.name = "FACE_" + name
        self.texture_name = texture_name
        self.uv = uv

DIAG_W = 1 / math.sqrt(2)
DIAG_S = (1 - DIAG_W) / 2.0

tex_map = [
texture_t("bed_feet_end.png"),
texture_t("bed_feet_side.png"),
texture_t("bed_feet_top.png"),
texture_t("bed_head_end.png"),
texture_t("bed_head_side.png"),
texture_t("bed_head_top.png"),
texture_t("bedrock.png"),
texture_t("bookshelf.png"),
texture_t("brick.png"),
texture_t("cactus_bottom.png"),
texture_t("cactus_side.png"),
texture_t("cactus_top.png"),
texture_t("cake_bottom.png"),
texture_t("cake_inner.png"),
texture_t("cake_side.png"),
texture_t("cake_top.png"),
texture_t("clay.png"),
texture_t("coal_ore.png"),
texture_t("cobblestone_mossy.png"),
texture_t("cobblestone.png"),
texture_t("crafting_table_front.png"),
texture_t("crafting_table_side.png"),
texture_t("crafting_table_top.png"),
texture_t("daylight_detector_side.png"),
texture_t("daylight_detector_top.png"),
texture_t("deadbush.png"),
texture_t("destroy_stage_0.png"),
texture_t("destroy_stage_1.png"),
texture_t("destroy_stage_2.png"),
texture_t("destroy_stage_3.png"),
texture_t("destroy_stage_4.png"),
texture_t("destroy_stage_5.png"),
texture_t("destroy_stage_6.png"),
texture_t("destroy_stage_7.png"),
texture_t("destroy_stage_8.png"),
texture_t("destroy_stage_9.png"),
texture_t("diamond_block.png"),
texture_t("diamond_ore.png"),
texture_t("dirt.png"),
texture_t("dispenser_front_horizontal.png"),
texture_t("dispenser_front_vertical.png"),
texture_t("door_iron_lower.png"),
texture_t("door_iron_upper.png"),
texture_t("door_wood_lower.png"),
texture_t("door_wood_upper.png"),
texture_t("emerald_block.png"),
texture_t("emerald_ore.png"),
texture_t("enchanting_table_bottom.png"),
texture_t("enchanting_table_side.png"),
texture_t("enchanting_table_top.png"),
texture_t("farmland_dry.png"),
texture_t("farmland_wet.png"),
texture_t("fern.png"),
texture_t("fire_layer_0.png"),
texture_t("fire_layer_1.png"),
texture_t("flower_dandelion.png"),
texture_t("flower_pot.png"),
texture_t("flower_rose.png"),
texture_t("furnace_front_off.png"),
texture_t("furnace_front_on.png"),
texture_t("furnace_side.png"),
texture_t("furnace_top.png"),
texture_t("glass_pane_top.png"),
texture_t("glass.png"),
texture_t("glowstone.png"),
texture_t("gold_block.png"),
texture_t("gold_ore.png"),
texture_t("grass_side_overlay.png"),
texture_t("grass_side_snowed.png"),
texture_t("grass_side.png"),
texture_t("grass_top.png"),
texture_t("gravel.png"),
texture_t("ice.png"),
texture_t("iron_bars.png"),
texture_t("iron_block.png"),
texture_t("iron_ore.png"),
texture_t("jukebox_side.png"),
texture_t("jukebox_top.png"),
texture_t("ladder.png"),
texture_t("lapis_block.png"),
texture_t("lapis_ore.png"),
texture_t("lava_flow.png", "LAVA_FLOW"),
texture_t("lava_still.png"),
texture_t("leaves_birch_opaque.png"),
texture_t("leaves_birch.png"),
texture_t("leaves_jungle_opaque.png"),
texture_t("leaves_jungle.png"),
texture_t("leaves_oak_opaque.png"),
texture_t("leaves_oak.png"),
texture_t("leaves_spruce_opaque.png"),
texture_t("leaves_spruce.png"),
texture_t("lever.png"),
texture_t("log_birch_top.png"),
texture_t("log_birch.png"),
texture_t("log_jungle_top.png"),
texture_t("log_jungle.png"),
texture_t("log_oak_top.png"),
texture_t("log_oak.png"),
texture_t("log_spruce_top.png"),
texture_t("log_spruce.png"),
texture_t("melon_side.png"),
texture_t("melon_stem_connected.png"),
texture_t("melon_stem_disconnected.png"),
texture_t("melon_top.png"),
texture_t("mob_spawner.png"),
texture_t("mushroom_block_inside.png"),
texture_t("mushroom_block_skin_brown.png"),
texture_t("mushroom_block_skin_red.png"),
texture_t("mushroom_block_skin_stem.png"),
texture_t("mushroom_brown.png"),
texture_t("mushroom_red.png"),
texture_t("mycelium_side.png"),
texture_t("mycelium_top.png"),
texture_t("nether_brick.png"),
texture_t("netherrack.png"),
texture_t("noteblock.png"),
texture_t("obsidian.png"),
texture_t("piston_bottom.png"),
texture_t("piston_inner.png"),
texture_t("piston_side.png"),
texture_t("piston_top_normal.png"),
texture_t("piston_top_sticky.png"),
texture_t("planks_birch.png"),
texture_t("planks_jungle.png"),
texture_t("planks_oak.png"),
texture_t("planks_spruce.png"),
texture_t("portal.png"),
texture_t("pumpkin_face_off.png"),
texture_t("pumpkin_face_on.png"),
texture_t("pumpkin_side.png"),
texture_t("pumpkin_stem_connected.png"),
texture_t("pumpkin_stem_disconnected.png"),
texture_t("pumpkin_top.png"),
texture_t("rail_activator_powered.png"),
texture_t("rail_activator.png"),
texture_t("rail_detector_powered.png"),
texture_t("rail_detector.png"),
texture_t("rail_golden_powered.png"),
texture_t("rail_golden.png"),
texture_t("rail_normal_turned.png"),
texture_t("rail_normal.png"),
texture_t("redstone_block.png"),
texture_t("redstone_dust_cross_overlay.png"),
texture_t("redstone_dust_cross.png"),
texture_t("redstone_dust_line_overlay.png"),
texture_t("redstone_dust_line.png"),
texture_t("redstone_lamp_off.png"),
texture_t("redstone_lamp_on.png"),
texture_t("redstone_ore.png"),
texture_t("redstone_torch_off.png"),
texture_t("redstone_torch_on.png"),
texture_t("reeds.png"),
texture_t("repeater_off.png"),
texture_t("repeater_on.png"),
texture_t("sand.png"),
texture_t("sandstone_bottom.png"),
texture_t("sandstone_carved.png"),
texture_t("sandstone_normal.png"),
texture_t("sandstone_smooth.png"),
texture_t("sandstone_top.png"),
texture_t("sapling_birch.png"),
texture_t("sapling_jungle.png"),
texture_t("sapling_oak.png"),
texture_t("sapling_spruce.png"),
texture_t("snow.png"),
texture_t("soul_sand.png"),
texture_t("sponge.png"),
texture_t("stone_slab_side.png"),
texture_t("stone_slab_top.png"),
texture_t("stone.png"),
texture_t("stonebrick_carved.png"),
texture_t("stonebrick_cracked.png"),
texture_t("stonebrick_mossy.png"),
texture_t("stonebrick.png"),
texture_t("tallgrass.png"),
texture_t("tnt_bottom.png"),
texture_t("tnt_side.png"),
texture_t("tnt_top.png"),
texture_t("torch_on.png"),
texture_t("trapdoor.png"),
texture_t("vine.png"),
texture_t("water_flow.png", "WATER_FLOW"),
texture_t("water_still.png"),
texture_t("web.png"),
texture_t("wheat_stage_0.png"),
texture_t("wheat_stage_1.png"),
texture_t("wheat_stage_2.png"),
texture_t("wheat_stage_3.png"),
texture_t("wheat_stage_4.png"),
texture_t("wheat_stage_5.png"),
texture_t("wheat_stage_6.png"),
texture_t("wheat_stage_7.png"),
texture_t("wool_colored_black.png"),
texture_t("wool_colored_blue.png"),
texture_t("wool_colored_brown.png"),
texture_t("wool_colored_cyan.png"),
texture_t("wool_colored_gray.png"),
texture_t("wool_colored_green.png"),
texture_t("wool_colored_light_blue.png"),
texture_t("wool_colored_lime.png"),
texture_t("wool_colored_magenta.png"),
texture_t("wool_colored_orange.png"),
texture_t("wool_colored_pink.png"),
texture_t("wool_colored_purple.png"),
texture_t("wool_colored_red.png"),
texture_t("wool_colored_silver.png"),
texture_t("wool_colored_white.png"),
texture_t("wool_colored_yellow.png"),
]

def out(s):
    print(s.replace("\t", "    "))

if __name__ == "__main__":
    out(header_header)

    out("enum terrain_face_id_t")
    out("{")
    out("\n\tFACE_ATLAS,")
    for i in tex_map:
        out("\t%s," % (i.name))
    out("\n\tFACE_DEBUG,")
    out("\n\tFACE_COUNT")
    out("};\n")

    out("\n")
    out("MCS_B181_CLIENT_TEXTURE_IDS_H_FUNC const char* get_face_id_name(const terrain_face_id_t id);")
    out("MCS_B181_CLIENT_TEXTURE_IDS_H_FUNC const char* get_face_fname(const terrain_face_id_t id);")
    out("MCS_B181_CLIENT_TEXTURE_IDS_H_FUNC terrain_face_id_t get_face_from_fname(const char* filename);")
    out("MCS_B181_CLIENT_TEXTURE_IDS_H_FUNC const terrain_face_t get_face_sub_coords(const terrain_face_id_t id);")

    out("\n")
    out("#ifdef MCS_B181_CLIENT_TEXTURE_IDS_H_IMPL")
    out("\n")

    out("MCS_B181_CLIENT_TEXTURE_IDS_H_FUNC const char* get_face_id_name(const terrain_face_id_t id)")
    out("{")
    out("\tswitch(id)")
    out("\t{")
    out("\t\tcase FACE_ATLAS: return \"FACE_ATLAS\";")
    for i in tex_map:
        out("\t\tcase %s: return \"%s\";" % (i.name, i.name))
    out("\t\tcase FACE_DEBUG: return \"FACE_DEBUG\";")
    out("\t\tcase FACE_COUNT: return \"FACE_COUNT\";")
    out("\t}")
    out("\treturn NULL;")
    out("}\n")

    out("MCS_B181_CLIENT_TEXTURE_IDS_H_FUNC const char* get_face_fname(const terrain_face_id_t id)")
    out("{")
    out("\tswitch(id)")
    out("\t{")
    for i in tex_map:
        out("\t\tcase %s: return \"%s\";" % (i.name, i.texture_name))
    out("\t}")
    out("\treturn NULL;")
    out("}\n")

    out("MCS_B181_CLIENT_TEXTURE_IDS_H_FUNC terrain_face_id_t get_face_from_fname(const char* filename)")
    out("{")
    out("\tif(filename == NULL) return FACE_DEBUG;")
    out("\tsize_t len = strlen(filename);")
    for i in tex_map:
        out("\tif(len == %d && *filename == \'%c\' && strcmp(\"%s\", filename) == 0 ) return %s;" % (len(i.texture_name), i.texture_name[0], i.texture_name, i.name))
    out("\treturn FACE_DEBUG;")
    out("}\n")

    out("MCS_B181_CLIENT_TEXTURE_IDS_H_FUNC const terrain_face_t get_face_sub_coords(const terrain_face_id_t id)")
    out("{")
    out("\tswitch(id)")
    out("\t{")
    for i in tex_map:
        if(i.uv == None):
            continue
        s = "{"
        for j in i.uv:
            s += "glm::vec2(float(%f), float(%f)), " % (j[0], j[1])
        s += "}"
        out("\t\tcase %s: return %s;" % (i.name, s))
    out("\t\tdefault: return { glm::vec2(0,0), glm::vec2(1,0), glm::vec2(0,1), glm::vec2(1,1) };")
    out("\t}")
    out("}\n")

    out("#endif /* MCS_B181_CLIENT_TEXTURE_IDS_H_IMPL */")

    out(header_footer)
